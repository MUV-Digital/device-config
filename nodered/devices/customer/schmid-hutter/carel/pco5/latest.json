{
    "id": "d2387857ce85b8b3",
    "label": "PCO5",
    "disabled": false,
    "info": "",
    "env": [],
    "nodes": [
        {
            "id": "54f0887b72233d8e",
            "type": "modbus-flex-getter",
            "z": "d2387857ce85b8b3",
            "name": "",
            "showStatusActivities": true,
            "showErrors": true,
            "showWarnings": true,
            "logIOActivities": false,
            "server": "7547c27f49e25e9c",
            "useIOFile": false,
            "ioFile": "",
            "useIOForPayload": false,
            "emptyMsgOnFail": false,
            "keepMsgProperties": true,
            "delayOnStart": false,
            "startDelayTime": "",
            "x": 650,
            "y": 380,
            "wires": [
                [
                    "6bad1b218a7768c4"
                ],
                []
            ]
        },
        {
            "id": "cfcdc39c842b590a",
            "type": "function",
            "z": "d2387857ce85b8b3",
            "name": "Read Boolean Values",
            "func": "msg.type = \"BOOLEAN\"\n\nmsg.payload = { \n    'fc': 1, \n    'unitid': 1,\n    'address': 1,\n    'quantity': 240\n};\n\n\nreturn msg;",
            "outputs": 1,
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 380,
            "y": 560,
            "wires": [
                [
                    "54f0887b72233d8e"
                ]
            ]
        },
        {
            "id": "cfb8de49990e8642",
            "type": "function",
            "z": "d2387857ce85b8b3",
            "name": "Read Analog Values",
            "func": "msg.payload = {\n    'fc': 3,\n    'unitid': 1,\n    'address': 1,\n    'quantity': 40\n};\n\nmsg.type = \"ANALOG\"\n\nreturn msg;",
            "outputs": 1,
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 380,
            "y": 200,
            "wires": [
                [
                    "54f0887b72233d8e"
                ]
            ]
        },
        {
            "id": "2dc080231414da55",
            "type": "inject",
            "z": "d2387857ce85b8b3",
            "name": "",
            "props": [
                {
                    "p": "payload"
                }
            ],
            "repeat": "15",
            "crontab": "",
            "once": true,
            "onceDelay": "10",
            "topic": "",
            "payload": "",
            "payloadType": "date",
            "x": 130,
            "y": 200,
            "wires": [
                [
                    "cfb8de49990e8642",
                    "906d8a04a09c1aa5",
                    "48deaa85494f42b3",
                    "926b2e75e2a94c89",
                    "c2207d683685e6c4",
                    "55fd033c75f1e79d",
                    "6221041f2e5104af",
                    "cfcdc39c842b590a"
                ]
            ]
        },
        {
            "id": "926b2e75e2a94c89",
            "type": "function",
            "z": "d2387857ce85b8b3",
            "name": "Read Integer Values",
            "func": "msg.payload = { \n    'fc': 3, \n    'unitid': 1,\n    'address': 5002,\n    'quantity': 54\n};\n\nmsg.type = \"INTEGER\"\n\nreturn msg;",
            "outputs": 1,
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 380,
            "y": 360,
            "wires": [
                [
                    "54f0887b72233d8e"
                ]
            ]
        },
        {
            "id": "6bad1b218a7768c4",
            "type": "switch",
            "z": "d2387857ce85b8b3",
            "name": "",
            "property": "type",
            "propertyType": "msg",
            "rules": [
                {
                    "t": "eq",
                    "v": "ANALOG",
                    "vt": "str"
                },
                {
                    "t": "eq",
                    "v": "INTEGER",
                    "vt": "str"
                },
                {
                    "t": "eq",
                    "v": "BOOLEAN",
                    "vt": "str"
                }
            ],
            "checkall": "true",
            "repair": false,
            "outputs": 3,
            "x": 850,
            "y": 380,
            "wires": [
                [
                    "c1a4f8d60d5509e4"
                ],
                [
                    "24c4a027702cdb4c"
                ],
                [
                    "7a7c9c1f0b874c1d"
                ]
            ]
        },
        {
            "id": "20a76390feae9a51",
            "type": "inject",
            "z": "d2387857ce85b8b3",
            "name": "",
            "props": [
                {
                    "p": "payload"
                },
                {
                    "p": "topic",
                    "vt": "str"
                }
            ],
            "repeat": "10",
            "crontab": "",
            "once": true,
            "onceDelay": "180",
            "topic": "",
            "payload": "",
            "payloadType": "date",
            "x": 670,
            "y": 40,
            "wires": [
                [
                    "a05af721ac5ff17f",
                    "d837a012db8325d7",
                    "ac0e07fe017265d5"
                ]
            ]
        },
        {
            "id": "a05af721ac5ff17f",
            "type": "function",
            "z": "d2387857ce85b8b3",
            "name": "Create Telemetry Data",
            "func": "var analog = global.get(\"local.devices.pco5.analog\");\nvar integer = global.get(\"local.devices.pco5.integer\");\nvar digital = global.get(\"local.devices.pco5.digital\");\nmsg.payload = { ...analog, ...integer};\n\nvar devices = global.get(\"cloud.devices\")\nvar pco5 = devices.filter(device => device.id === \"pco5\");\nif(pco5.length > 0){\n    pco5[0].sensors = msg.payload; \n}\n\n\nreturn msg;",
            "outputs": 1,
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 900,
            "y": 40,
            "wires": [
                []
            ]
        },
        {
            "id": "d5e19640061a1d7d",
            "type": "inject",
            "z": "d2387857ce85b8b3",
            "name": "",
            "props": [
                {
                    "p": "payload"
                },
                {
                    "p": "topic",
                    "vt": "str"
                }
            ],
            "repeat": "",
            "crontab": "",
            "once": true,
            "onceDelay": "1",
            "topic": "",
            "payload": "",
            "payloadType": "date",
            "x": 110,
            "y": 40,
            "wires": [
                [
                    "69b8b9826880ca6c",
                    "d81a8e7480a6fe96",
                    "cb9c52f3e711b027"
                ]
            ]
        },
        {
            "id": "69b8b9826880ca6c",
            "type": "change",
            "z": "d2387857ce85b8b3",
            "name": "",
            "rules": [
                {
                    "t": "set",
                    "p": "local.devices.pco5.analog",
                    "pt": "global",
                    "to": "{}",
                    "tot": "json"
                }
            ],
            "action": "",
            "property": "",
            "from": "",
            "to": "",
            "reg": false,
            "x": 370,
            "y": 40,
            "wires": [
                []
            ]
        },
        {
            "id": "d81a8e7480a6fe96",
            "type": "change",
            "z": "d2387857ce85b8b3",
            "name": "",
            "rules": [
                {
                    "t": "set",
                    "p": "local.devices.pco5.integer",
                    "pt": "global",
                    "to": "{}",
                    "tot": "json"
                }
            ],
            "action": "",
            "property": "",
            "from": "",
            "to": "",
            "reg": false,
            "x": 370,
            "y": 80,
            "wires": [
                []
            ]
        },
        {
            "id": "cb9c52f3e711b027",
            "type": "change",
            "z": "d2387857ce85b8b3",
            "name": "",
            "rules": [
                {
                    "t": "set",
                    "p": "local.devices.pco5.digital",
                    "pt": "global",
                    "to": "{}",
                    "tot": "json"
                }
            ],
            "action": "",
            "property": "",
            "from": "",
            "to": "",
            "reg": false,
            "x": 360,
            "y": 120,
            "wires": [
                []
            ]
        },
        {
            "id": "3a29bba03daebffc",
            "type": "buffer-parser",
            "z": "d2387857ce85b8b3",
            "name": "Analog Parser",
            "data": "payload",
            "dataType": "msg",
            "specification": "spec",
            "specificationType": "msg",
            "items": [
                {
                    "type": "int16be",
                    "name": "1",
                    "offset": 0,
                    "length": 1,
                    "offsetbit": 0,
                    "scale": "0.1",
                    "mask": ""
                },
                {
                    "type": "int16be",
                    "name": "2",
                    "offset": 2,
                    "length": 1,
                    "offsetbit": 0,
                    "scale": "0.1",
                    "mask": ""
                },
                {
                    "type": "int16be",
                    "name": "item3",
                    "offset": 4,
                    "length": 1,
                    "offsetbit": 0,
                    "scale": "0.1",
                    "mask": ""
                },
                {
                    "type": "int16be",
                    "name": "item4",
                    "offset": 6,
                    "length": 1,
                    "offsetbit": 0,
                    "scale": "0.1",
                    "mask": ""
                },
                {
                    "type": "int16be",
                    "name": "item5",
                    "offset": 8,
                    "length": 1,
                    "offsetbit": 0,
                    "scale": "0.1",
                    "mask": ""
                },
                {
                    "type": "int16be",
                    "name": "item6",
                    "offset": 10,
                    "length": 1,
                    "offsetbit": 0,
                    "scale": "0.1",
                    "mask": ""
                }
            ],
            "swap1": "",
            "swap2": "",
            "swap3": "",
            "swap1Type": "swap",
            "swap2Type": "swap",
            "swap3Type": "swap",
            "msgProperty": "payload",
            "msgPropertyType": "str",
            "resultType": "keyvalue",
            "resultTypeType": "return",
            "multipleResult": false,
            "fanOutMultipleResult": false,
            "setTopic": true,
            "outputs": 1,
            "x": 1340,
            "y": 340,
            "wires": [
                [
                    "fbce1d2eb614cf6a"
                ]
            ]
        },
        {
            "id": "fbce1d2eb614cf6a",
            "type": "function",
            "z": "d2387857ce85b8b3",
            "name": "Set Analog Values",
            "func": "for (const property in msg.payload) {\n    global.get(\"local.devices.pco5.analog\")[property] = Math.round((msg.payload[property] + Number.EPSILON) * 100) / 100;\n}\n\nreturn msg;",
            "outputs": 1,
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 1550,
            "y": 340,
            "wires": [
                []
            ]
        },
        {
            "id": "bb951fbe74563b6d",
            "type": "function",
            "z": "d2387857ce85b8b3",
            "name": "Set Integer Values",
            "func": "for (const property in msg.payload) {\n    global.get(\"local.devices.pco5.integer\")[property] = Math.round((msg.payload[property] + Number.EPSILON) * 100) / 100;\n}\n\nreturn msg;",
            "outputs": 1,
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 1550,
            "y": 380,
            "wires": [
                []
            ]
        },
        {
            "id": "906d8a04a09c1aa5",
            "type": "function",
            "z": "d2387857ce85b8b3",
            "name": "Read Analog Values",
            "func": "msg.payload = {\n    'fc': 3,\n    'unitid': 1,\n    'address': 100,\n    'quantity': 26\n};\n\nmsg.type = \"ANALOG\"\n\nreturn msg;",
            "outputs": 1,
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 380,
            "y": 240,
            "wires": [
                [
                    "54f0887b72233d8e"
                ]
            ]
        },
        {
            "id": "48deaa85494f42b3",
            "type": "function",
            "z": "d2387857ce85b8b3",
            "name": "Read Analog Values",
            "func": "msg.payload = {\n    'fc': 3,\n    'unitid': 1,\n    'address': 180,\n    'quantity': 28\n};\n\nmsg.type = \"ANALOG\"\n\nreturn msg;",
            "outputs": 1,
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 380,
            "y": 280,
            "wires": [
                [
                    "54f0887b72233d8e"
                ]
            ]
        },
        {
            "id": "c1a4f8d60d5509e4",
            "type": "function",
            "z": "d2387857ce85b8b3",
            "name": "Analog Value Dynamic Spec",
            "func": "msg.spec = {\n    \"options\":\n    {\n        \"byteSwap\": false,\n        \"resultType\": \"keyvalue\",\n        \"singleResult\": true,\n        \"setTopic\": true,\n        \"msgProperty\": \"payload\",\n    },\n    \"items\": []\n}\n\nvar adressIcrement = msg.modbusRequest.address;\nvar offset = 0;\nconst items = msg.payload.map(value => {\n    const item = {\n        \"name\": \"ANALOG-\" + adressIcrement.toString(),\n        \"type\": \"int16be\",\n        \"length \": 1,\n        \"offset\": offset,\n        \"offsetbit\": 0,\n        \"scale\": \"0.1\",\n        \"mask\": \"\"\n    };\n    adressIcrement++;\n    offset = offset + 2;\n\n    return item;\n});\n\nmsg.spec.items = items;\n\nreturn msg;",
            "outputs": 1,
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 1080,
            "y": 340,
            "wires": [
                [
                    "3a29bba03daebffc"
                ]
            ]
        },
        {
            "id": "24c4a027702cdb4c",
            "type": "function",
            "z": "d2387857ce85b8b3",
            "name": "Integer Value Dynamic Spec",
            "func": "msg.spec = {\n    \"options\":\n    {\n        \"byteSwap\": false,\n        \"resultType\": \"keyvalue\",\n        \"singleResult\": true,\n        \"setTopic\": true,\n        \"msgProperty\": \"payload\",\n    },\n    \"items\": []\n}\n\nvar adressIcrement = msg.modbusRequest.address;\nvar offset = 0;\nconst items = msg.payload.map(value => {\n    const item = {\n        \"name\": \"INTEGER-\" + adressIcrement.toString(),\n        \"type\": \"int16be\",\n        \"length \": 1,\n        \"offset\": offset,\n        \"offsetbit\": 0,\n        \"scale\": \"1\",\n        \"mask\": \"\"\n    };\n    adressIcrement++;\n    offset = offset + 2;\n\n    return item;\n});\n\nmsg.spec.items = items;\n\nreturn msg;",
            "outputs": 1,
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 1080,
            "y": 380,
            "wires": [
                [
                    "7f3203e0b6ed7fcd"
                ]
            ]
        },
        {
            "id": "c2207d683685e6c4",
            "type": "function",
            "z": "d2387857ce85b8b3",
            "name": "Read Integer Values",
            "func": "msg.payload = { \n    'fc': 3, \n    'unitid': 1,\n    'address': 5111,\n    'quantity': 2\n};\n\nmsg.type = \"INTEGER\"\n\nreturn msg;",
            "outputs": 1,
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 380,
            "y": 400,
            "wires": [
                [
                    "54f0887b72233d8e"
                ]
            ]
        },
        {
            "id": "55fd033c75f1e79d",
            "type": "function",
            "z": "d2387857ce85b8b3",
            "name": "Read Integer Values",
            "func": "msg.payload = { \n    'fc': 3, \n    'unitid': 1,\n    'address': 5151,\n    'quantity': 3\n};\n\nmsg.type = \"INTEGER\"\n\nreturn msg;",
            "outputs": 1,
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 380,
            "y": 440,
            "wires": [
                [
                    "54f0887b72233d8e"
                ]
            ]
        },
        {
            "id": "6221041f2e5104af",
            "type": "function",
            "z": "d2387857ce85b8b3",
            "name": "Read Integer Values",
            "func": "msg.payload = { \n    'fc': 3, \n    'unitid': 1,\n    'address': 5193,\n    'quantity': 16\n};\n\nmsg.type = \"INTEGER\"\n\nreturn msg;",
            "outputs": 1,
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 380,
            "y": 480,
            "wires": [
                [
                    "54f0887b72233d8e"
                ]
            ]
        },
        {
            "id": "7f3203e0b6ed7fcd",
            "type": "buffer-parser",
            "z": "d2387857ce85b8b3",
            "name": "Integer Parser",
            "data": "payload",
            "dataType": "msg",
            "specification": "spec",
            "specificationType": "msg",
            "items": [
                {
                    "type": "int16be",
                    "name": "1",
                    "offset": 0,
                    "length": 1,
                    "offsetbit": 0,
                    "scale": "0.1",
                    "mask": ""
                },
                {
                    "type": "int16be",
                    "name": "2",
                    "offset": 2,
                    "length": 1,
                    "offsetbit": 0,
                    "scale": "0.1",
                    "mask": ""
                },
                {
                    "type": "int16be",
                    "name": "item3",
                    "offset": 4,
                    "length": 1,
                    "offsetbit": 0,
                    "scale": "0.1",
                    "mask": ""
                },
                {
                    "type": "int16be",
                    "name": "item4",
                    "offset": 6,
                    "length": 1,
                    "offsetbit": 0,
                    "scale": "0.1",
                    "mask": ""
                },
                {
                    "type": "int16be",
                    "name": "item5",
                    "offset": 8,
                    "length": 1,
                    "offsetbit": 0,
                    "scale": "0.1",
                    "mask": ""
                },
                {
                    "type": "int16be",
                    "name": "item6",
                    "offset": 10,
                    "length": 1,
                    "offsetbit": 0,
                    "scale": "0.1",
                    "mask": ""
                }
            ],
            "swap1": "",
            "swap2": "",
            "swap3": "",
            "swap1Type": "swap",
            "swap2Type": "swap",
            "swap3Type": "swap",
            "msgProperty": "payload",
            "msgPropertyType": "str",
            "resultType": "keyvalue",
            "resultTypeType": "return",
            "multipleResult": false,
            "fanOutMultipleResult": false,
            "setTopic": true,
            "outputs": 1,
            "x": 1340,
            "y": 380,
            "wires": [
                [
                    "bb951fbe74563b6d"
                ]
            ]
        },
        {
            "id": "7a7c9c1f0b874c1d",
            "type": "function",
            "z": "d2387857ce85b8b3",
            "name": "Boolean Value",
            "func": "var adressIcrement = msg.modbusRequest.address;\nconst booleanValues = msg.payload.reduce(function (obj, value) {\n    let prefix = adressIcrement > 100 ? \"ALARM-\" : \"STATE-\";\n    let name = prefix + adressIcrement.toString();\n    obj[name] = value;\n    adressIcrement++;\n    \n    return obj;\n}, {});\n\nglobal.set(\"local.devices.pco5.digital\", booleanValues);\n\nreturn msg;",
            "outputs": 1,
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 1040,
            "y": 420,
            "wires": [
                []
            ]
        },
        {
            "id": "d837a012db8325d7",
            "type": "function",
            "z": "d2387857ce85b8b3",
            "name": "Create Error Data",
            "func": "var digital = global.get(\"local.devices.pco5.digital\");\nvar devices = global.get(\"cloud.devices\")\nvar pco5 = devices.filter(device => device.id === \"pco5\");\n\nconst activeAlarms = Object.keys(digital).filter(key => key.includes(\"ALARM-\") && digital[key]);\n\nif (pco5.length > 0) {\n    if(activeAlarms.length > 0){\n        activeAlarms.forEach(alarm => {\n            pco5[0].errors[alarm] = digital[alarm];\n        });\n    } else {\n        pco5[0].errors = {};\n    }\n}\n\nreturn msg;",
            "outputs": 1,
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 890,
            "y": 120,
            "wires": [
                []
            ]
        },
        {
            "id": "ac0e07fe017265d5",
            "type": "function",
            "z": "d2387857ce85b8b3",
            "name": "Create State Data",
            "func": "var digital = global.get(\"local.devices.pco5.digital\");\nvar devices = global.get(\"cloud.devices\")\nvar pco5 = devices.filter(device => device.id === \"pco5\");\n\nconst activeStates = Object.keys(digital).filter(key => key.includes(\"STATE-\") && digital[key]);\n\nif (pco5.length > 0) {\n    if (activeStates.length > 0){\n        activeStates.forEach(state => {\n            pco5[0].states[state] = digital[state];\n        });\n    } else {\n        pco5[0].states = {};\n    }\n}\n\nreturn msg;",
            "outputs": 1,
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 890,
            "y": 80,
            "wires": [
                []
            ]
        }
    ],
    "configs": [
        {
            "id": "7547c27f49e25e9c",
            "type": "modbus-client",
            "z": "d2387857ce85b8b3",
            "name": "RS485",
            "clienttype": "serial",
            "bufferCommands": true,
            "stateLogEnabled": true,
            "queueLogEnabled": false,
            "failureLogEnabled": true,
            "tcpHost": "127.0.0.1",
            "tcpPort": "502",
            "tcpType": "DEFAULT",
            "serialPort": "/dev/ttyUSB0",
            "serialType": "RTU-BUFFERD",
            "serialBaudrate": "19200",
            "serialDatabits": "8",
            "serialStopbits": "2",
            "serialParity": "none",
            "serialConnectionDelay": "50",
            "serialAsciiResponseStartDelimiter": "0x3A",
            "unit_id": 1,
            "commandDelay": 1,
            "clientTimeout": 1000,
            "reconnectOnTimeout": true,
            "reconnectTimeout": 5000,
            "parallelUnitIdsAllowed": false,
            "showWarnings": true,
            "showLogs": true
        }
    ]
}