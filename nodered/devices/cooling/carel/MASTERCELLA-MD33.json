{
    "id": "d7e4f72770ddb9a3",
    "label": "7EbAorHVohVRLwAvo9RYEY",
    "disabled": false,
    "info": "",
    "env": [],
    "nodes": [
        {
            "id": "9e8c8d916d3ab9b9",
            "type": "mqtt in",
            "z": "d7e4f72770ddb9a3",
            "name": "Command",
            "topic": "",
            "qos": "2",
            "datatype": "auto-detect",
            "broker": "de96f526d294fb46",
            "nl": false,
            "rap": true,
            "rh": 0,
            "inputs": 1,
            "x": 120,
            "y": 680,
            "wires": [
                [
                    "39346a19aeb619c4"
                ]
            ]
        },
        {
            "id": "9ad76fd273b04c09",
            "type": "mqtt out",
            "z": "d7e4f72770ddb9a3",
            "name": "",
            "topic": "cloud/upstream/data",
            "qos": "2",
            "retain": "true",
            "respTopic": "",
            "contentType": "",
            "userProps": "",
            "correl": "",
            "expiry": "",
            "broker": "de96f526d294fb46",
            "x": 1220,
            "y": 600,
            "wires": []
        },
        {
            "id": "0ddbae0a559603cf",
            "type": "inject",
            "z": "d7e4f72770ddb9a3",
            "name": "",
            "props": [
                {
                    "p": "payload"
                }
            ],
            "repeat": "1800",
            "crontab": "",
            "once": true,
            "onceDelay": "10",
            "topic": "",
            "payload": "{}",
            "payloadType": "json",
            "x": 130,
            "y": 560,
            "wires": [
                [
                    "5538fc8d557eb90b"
                ]
            ]
        },
        {
            "id": "d467de8c0ca340bc",
            "type": "function",
            "z": "d7e4f72770ddb9a3",
            "name": "Set Command for this device",
            "func": "msg.action = \"subscribe\";\nmsg.topic = {\n    \"qos\": 2,\n    \"topic\": \"device/command/\" + flow.get(\"device\").node.id\n}\n\nreturn msg;",
            "outputs": 1,
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 180,
            "y": 640,
            "wires": [
                [
                    "9e8c8d916d3ab9b9"
                ]
            ]
        },
        {
            "id": "39346a19aeb619c4",
            "type": "debug",
            "z": "d7e4f72770ddb9a3",
            "name": "debug 2",
            "active": true,
            "tosidebar": true,
            "console": false,
            "tostatus": false,
            "complete": "false",
            "statusVal": "",
            "statusType": "auto",
            "x": 320,
            "y": 680,
            "wires": []
        },
        {
            "id": "c411d99f85db7f6b",
            "type": "inject",
            "z": "d7e4f72770ddb9a3",
            "name": "Startup",
            "props": [
                {
                    "p": "payload"
                }
            ],
            "repeat": "",
            "crontab": "",
            "once": true,
            "onceDelay": "3",
            "topic": "",
            "payload": "",
            "payloadType": "date",
            "x": 160,
            "y": 80,
            "wires": [
                [
                    "7647930fe7612eae"
                ]
            ]
        },
        {
            "id": "7647930fe7612eae",
            "type": "getflows",
            "z": "d7e4f72770ddb9a3",
            "name": "",
            "x": 320,
            "y": 80,
            "wires": [
                [
                    "1cde108c090826be"
                ]
            ]
        },
        {
            "id": "1cde108c090826be",
            "type": "function",
            "z": "d7e4f72770ddb9a3",
            "name": "Init",
            "func": "var device = global.get(\"cloud.devices\").find(device => {\n    return device.node.id === msg.payload.find(flow => flow.id === msg.thisflow).label;\n})\n\nflow.set(\"device\", {\n    \"node\": device.node,\n    \"data\": device.data,\n    \"protocol\": device.protocol,\n    \"uplink\": device.uplink,\n    \"downlink\": device.downlink,\n    \"sensors\": {},\n    \"errors\": {},\n    \"states\": {}\n});\n\nreturn msg;",
            "outputs": 1,
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 450,
            "y": 80,
            "wires": [
                [
                    "956333d57271f5df"
                ]
            ]
        },
        {
            "id": "5538fc8d557eb90b",
            "type": "switch",
            "z": "d7e4f72770ddb9a3",
            "name": "Config correct",
            "property": "device.node",
            "propertyType": "flow",
            "rules": [
                {
                    "t": "null"
                },
                {
                    "t": "istype",
                    "v": "object",
                    "vt": "object"
                }
            ],
            "checkall": "true",
            "repair": false,
            "outputs": 2,
            "x": 140,
            "y": 600,
            "wires": [
                [
                    "360d823cad2ddea5"
                ],
                [
                    "d467de8c0ca340bc"
                ]
            ]
        },
        {
            "id": "360d823cad2ddea5",
            "type": "function",
            "z": "d7e4f72770ddb9a3",
            "name": "Error",
            "func": "node.warn(\"The device configuration is wrong!\")\nnode.done()",
            "outputs": 0,
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 330,
            "y": 600,
            "wires": []
        },
        {
            "id": "e804810159b83938",
            "type": "mqtt out",
            "z": "d7e4f72770ddb9a3",
            "name": "",
            "topic": "cloud/upstream/error",
            "qos": "2",
            "retain": "true",
            "respTopic": "",
            "contentType": "",
            "userProps": "",
            "correl": "",
            "expiry": "",
            "broker": "de96f526d294fb46",
            "x": 1220,
            "y": 660,
            "wires": []
        },
        {
            "id": "8aefb4d56dc50d5e",
            "type": "modbus-flex-connector",
            "z": "d7e4f72770ddb9a3",
            "name": "Channel 1 Connector",
            "maxReconnectsPerMinute": 4,
            "emptyQueue": false,
            "showStatusActivities": true,
            "showErrors": true,
            "server": "4cc9c8b77fd8acf3",
            "x": 1080,
            "y": 80,
            "wires": [
                []
            ]
        },
        {
            "id": "ddb520538f245dab",
            "type": "modbus-flex-connector",
            "z": "d7e4f72770ddb9a3",
            "name": "Channel 2 Connector",
            "maxReconnectsPerMinute": 4,
            "emptyQueue": false,
            "showStatusActivities": true,
            "showErrors": true,
            "server": "416b4c046be3315e",
            "x": 1080,
            "y": 120,
            "wires": [
                []
            ]
        },
        {
            "id": "dbdbad4047265c0b",
            "type": "modbus-flex-sequencer",
            "z": "d7e4f72770ddb9a3",
            "name": "Channel 2 Read",
            "sequences": [
                {
                    "name": "Test",
                    "unitid": "1",
                    "fc": "FC3",
                    "address": "1",
                    "quantity": "1"
                }
            ],
            "server": "416b4c046be3315e",
            "showStatusActivities": true,
            "showErrors": true,
            "showWarnings": true,
            "logIOActivities": false,
            "useIOFile": false,
            "ioFile": "",
            "useIOForPayload": false,
            "emptyMsgOnFail": false,
            "keepMsgProperties": true,
            "delayOnStart": false,
            "startDelayTime": "",
            "x": 740,
            "y": 380,
            "wires": [
                [
                    "ea8fd5449f6fd5d6"
                ],
                []
            ]
        },
        {
            "id": "3458ec8ee693bc56",
            "type": "modbus-flex-sequencer",
            "z": "d7e4f72770ddb9a3",
            "name": "Channel 1 Read",
            "sequences": [
                {
                    "name": "Test",
                    "unitid": "1",
                    "fc": "FC3",
                    "address": "1",
                    "quantity": "1"
                }
            ],
            "server": "4cc9c8b77fd8acf3",
            "showStatusActivities": true,
            "showErrors": true,
            "showWarnings": true,
            "logIOActivities": false,
            "useIOFile": false,
            "ioFile": "",
            "useIOForPayload": false,
            "emptyMsgOnFail": false,
            "keepMsgProperties": true,
            "delayOnStart": false,
            "startDelayTime": "",
            "x": 740,
            "y": 320,
            "wires": [
                [
                    "db600b88772517a2"
                ],
                []
            ]
        },
        {
            "id": "2f7559fb2ef62fee",
            "type": "function",
            "z": "d7e4f72770ddb9a3",
            "name": "send data based on config channel 1",
            "func": "msg.payload = \"\";\n\nmsg.sequences = flow.get(\"device.data\").filter(dataPoint => dataPoint.protocol.channel === 1).map(dataPoint => {\n    return { \n        dataPoint: dataPoint,\n        name: dataPoint.id, \n        fc: dataPoint.protocol.fc, \n        address: dataPoint.protocol.address, \n        unitid: flow.get(\"device.node.unitId\"), \n        quantity: global.get(\"function.typeToRegisterLength\")(dataPoint.protocol.type)\n    };\n});\n\nif (msg.sequences.length > 0){\n    node.send(msg);\n} else {\n    node.done();\n}\n\nnode.done();\n",
            "outputs": 1,
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 430,
            "y": 320,
            "wires": [
                [
                    "3458ec8ee693bc56"
                ]
            ]
        },
        {
            "id": "28862c1aae651797",
            "type": "comment",
            "z": "d7e4f72770ddb9a3",
            "name": "----- Register for commands from cloud",
            "info": "",
            "x": 150,
            "y": 500,
            "wires": []
        },
        {
            "id": "e7613cc0431ff1c8",
            "type": "comment",
            "z": "d7e4f72770ddb9a3",
            "name": "---- Connections initialization",
            "info": "",
            "x": 120,
            "y": 20,
            "wires": []
        },
        {
            "id": "26984e68e4dd2d28",
            "type": "function",
            "z": "d7e4f72770ddb9a3",
            "name": "Set parameters channel 1",
            "func": "const protocolParameter = flow.get(\"device.protocol\");\nconst channel = global.get(\"device.interface.serial.channels\").find(channel => channel.id === 1);\n\nif (channel) {\n    msg.payload = {\n        \"connectorType\": channel.connectorType,\n        \"serialPort\": channel.serialPort,\n        \"serialBaudrate\": protocolParameter.serialBaudrate ? protocolParameter.serialBaudrate : 19200,\n        \"serialDatabits\": protocolParameter.serialDatabits ? protocolParameter.serialDatabits : 8,\n        \"serialStopbits\": protocolParameter.serialStopbits ? protocolParameter.serialStopbits : 1,\n        \"serialParity\": protocolParameter.serialParity ? protocolParameter.serialParity : \"none\",\n        \"serialType\": protocolParameter.serialType ? protocolParameter.serialType : \"RTU-BUFFERD\",\n        \"serialConnectionDelay\": protocolParameter.serialConnectionDelay ? protocolParameter.serialConnectionDelay : 100,\n        \"unitId\": protocolParameter.unitId ? protocolParameter.unitId : 1,\n        \"commandDelay\": protocolParameter.commandDelay ? protocolParameter.commandDelay : 5,\n        \"clientTimeout\": protocolParameter.clientTimeout ? protocolParameter.clientTimeout : 1000,\n        \"reconnectTimeout\": protocolParameter.reconnectTimeout ? protocolParameter.reconnectTimeout : 2000\n    };\n\n    node.send(msg);\n} else {\n    node.done()\n}\n\nnode.done()\n",
            "outputs": 1,
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 810,
            "y": 80,
            "wires": [
                [
                    "8aefb4d56dc50d5e"
                ]
            ]
        },
        {
            "id": "956333d57271f5df",
            "type": "switch",
            "z": "d7e4f72770ddb9a3",
            "name": "Config correct",
            "property": "device.node",
            "propertyType": "flow",
            "rules": [
                {
                    "t": "istype",
                    "v": "object",
                    "vt": "object"
                }
            ],
            "checkall": "true",
            "repair": false,
            "outputs": 1,
            "x": 600,
            "y": 80,
            "wires": [
                [
                    "26984e68e4dd2d28",
                    "b8f2e6f3ffa0fc0c"
                ]
            ]
        },
        {
            "id": "18e1ca5c6619e132",
            "type": "comment",
            "z": "d7e4f72770ddb9a3",
            "name": "---- Data",
            "info": "",
            "x": 60,
            "y": 200,
            "wires": []
        },
        {
            "id": "db600b88772517a2",
            "type": "function",
            "z": "d7e4f72770ddb9a3",
            "name": "Set data point values",
            "func": "msg.spec = {\n    \"options\":\n    {\n        \"byteSwap\": false,\n        \"resultType\": \"keyvalue\",\n        \"singleResult\": true,\n        \"setTopic\": true,\n        \"msgProperty\": \"payload\",\n    },\n    \"items\": []\n}\n\nmsg.spec.items = [\n    {\n        \"name\": msg.name,\n        \"type\": msg.dataPoint.protocol.type,\n        \"length \": global.get(\"function.typeToRegisterLength\")(msg.dataPoint.protocol.type),\n        \"offset\": 0,\n        \"offsetbit\": msg.dataPoint.protocol.offsetbit,\n        \"scale\": msg.dataPoint.protocol.scale.toString(),\n        \"mask\": msg.dataPoint.protocol.mask\n    }\n];\n\nreturn msg;",
            "outputs": 1,
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 960,
            "y": 320,
            "wires": [
                [
                    "6955c2fd99d775b2"
                ]
            ]
        },
        {
            "id": "6955c2fd99d775b2",
            "type": "buffer-parser",
            "z": "d7e4f72770ddb9a3",
            "name": "",
            "data": "payload",
            "dataType": "msg",
            "specification": "spec",
            "specificationType": "msg",
            "items": [
                {
                    "type": "int16be",
                    "name": "item1",
                    "offset": 0,
                    "length": 1,
                    "offsetbit": 0,
                    "scale": "0.1",
                    "mask": ""
                }
            ],
            "swap1": "",
            "swap2": "",
            "swap3": "",
            "swap1Type": "swap",
            "swap2Type": "swap",
            "swap3Type": "swap",
            "msgProperty": "payload",
            "msgPropertyType": "str",
            "resultType": "keyvalue",
            "resultTypeType": "return",
            "multipleResult": false,
            "fanOutMultipleResult": false,
            "setTopic": true,
            "outputs": 1,
            "x": 1150,
            "y": 320,
            "wires": [
                [
                    "b7355febc06cb13b"
                ]
            ]
        },
        {
            "id": "ee3940e38fb31115",
            "type": "switch",
            "z": "d7e4f72770ddb9a3",
            "name": "Config correct",
            "property": "device.node",
            "propertyType": "flow",
            "rules": [
                {
                    "t": "istype",
                    "v": "object",
                    "vt": "object"
                }
            ],
            "checkall": "true",
            "repair": false,
            "outputs": 1,
            "x": 160,
            "y": 320,
            "wires": [
                [
                    "2f7559fb2ef62fee",
                    "fb101ae30c163bce"
                ]
            ]
        },
        {
            "id": "fbb73fe4327ec0b1",
            "type": "buffer-parser",
            "z": "d7e4f72770ddb9a3",
            "name": "",
            "data": "payload",
            "dataType": "msg",
            "specification": "spec",
            "specificationType": "msg",
            "items": [
                {
                    "type": "int16be",
                    "name": "item1",
                    "offset": 0,
                    "length": 1,
                    "offsetbit": 0,
                    "scale": "0.1",
                    "mask": ""
                }
            ],
            "swap1": "",
            "swap2": "",
            "swap3": "",
            "swap1Type": "swap",
            "swap2Type": "swap",
            "swap3Type": "swap",
            "msgProperty": "payload",
            "msgPropertyType": "str",
            "resultType": "keyvalue",
            "resultTypeType": "return",
            "multipleResult": false,
            "fanOutMultipleResult": false,
            "setTopic": true,
            "outputs": 1,
            "x": 1150,
            "y": 380,
            "wires": [
                [
                    "958e0e5e45de5666"
                ]
            ]
        },
        {
            "id": "b7355febc06cb13b",
            "type": "function",
            "z": "d7e4f72770ddb9a3",
            "name": "Set sensor value on device channel 1",
            "func": "var device = global.get(\"cloud.devices\").find(device => {\n    return device.node.id === flow.get(\"device\").node.id\n})\n\nfor (var propertyName in msg.payload) {\n    if (typeof msg.payload[propertyName] === 'number') {\n        // Round to 2 decimal\n        msg.payload[propertyName] = Math.round((msg.payload[propertyName] + Number.EPSILON) * 100) / 100\n    }\n    if (msg.dataPoint.protocol.type === \"bool\"){\n        device.states[propertyName] = msg.payload[propertyName];\n        flow.get(\"device\").states[propertyName] = msg.payload[propertyName];\n    } else if (msg.dataPoint.protocol.type === \"bool\" && msg.dataPoint.protocol.isError) {\n        if (msg.dataPoint.protocol.invert){\n            msg.payload[propertyName] = !msg.payload[propertyName];\n        }\n        if (msg.payload[propertyName]){\n            device.errors[propertyName] = msg.payload[propertyName];\n            flow.get(\"device\").errors[propertyName] = msg.payload[propertyName];\n        } else {\n            delete device.errors[propertyName];\n            delete flow.get(\"device\").errors[propertyName];\n        }\n    } else {\n        device.sensors[propertyName] = msg.payload[propertyName];\n        flow.get(\"device\").sensors[propertyName] = msg.payload[propertyName];\n    }\n}\n\nreturn msg;",
            "outputs": 1,
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 1390,
            "y": 320,
            "wires": [
                []
            ]
        },
        {
            "id": "e77e838755e2e8c6",
            "type": "inject",
            "z": "d7e4f72770ddb9a3",
            "name": "Read intervall",
            "props": [
                {
                    "p": "payload"
                },
                {
                    "p": "topic",
                    "vt": "str"
                }
            ],
            "repeat": "20",
            "crontab": "",
            "once": true,
            "onceDelay": "10",
            "topic": "",
            "payload": "",
            "payloadType": "date",
            "x": 160,
            "y": 260,
            "wires": [
                [
                    "ee3940e38fb31115"
                ]
            ]
        },
        {
            "id": "958e0e5e45de5666",
            "type": "function",
            "z": "d7e4f72770ddb9a3",
            "name": "Set sensor value on device channel 2",
            "func": "var device = global.get(\"cloud.devices\").find(device => {\n    return device.node.id === flow.get(\"device\").node.id\n})\n\nfor (var propertyName in msg.payload) {\n    if (typeof msg.payload[propertyName] === 'number') {\n        // Round to 2 decimal\n        msg.payload[propertyName] = Math.round((msg.payload[propertyName] + Number.EPSILON) * 100) / 100\n    }\n    if (msg.dataPoint.protocol.type === \"bool\"){\n        device.states[propertyName] = msg.payload[propertyName];\n        flow.get(\"device\").states[propertyName] = msg.payload[propertyName];\n    } else if (msg.dataPoint.protocol.type === \"bool\" && msg.dataPoint.protocol.isError) {\n        if (msg.dataPoint.protocol.invert){\n            msg.payload[propertyName] = !msg.payload[propertyName];\n        }\n        if (msg.payload[propertyName]){\n            device.errors[propertyName] = msg.payload[propertyName];\n            flow.get(\"device\").errors[propertyName] = msg.payload[propertyName];\n        } else {\n            delete device.errors[propertyName];\n            delete flow.get(\"device\").errors[propertyName];\n        }\n    } else {\n        device.sensors[propertyName] = msg.payload[propertyName];\n        flow.get(\"device\").sensors[propertyName] = msg.payload[propertyName];\n    }\n}\n\nreturn msg;",
            "outputs": 1,
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 1390,
            "y": 380,
            "wires": [
                []
            ]
        },
        {
            "id": "ea8fd5449f6fd5d6",
            "type": "function",
            "z": "d7e4f72770ddb9a3",
            "name": "Set data point values",
            "func": "msg.spec = {\n    \"options\":\n    {\n        \"byteSwap\": false,\n        \"resultType\": \"keyvalue\",\n        \"singleResult\": true,\n        \"setTopic\": true,\n        \"msgProperty\": \"payload\",\n    },\n    \"items\": []\n}\n\nmsg.spec.items = [\n    {\n        \"name\": msg.name,\n        \"type\": msg.dataPoint.protocol.type,\n        \"length \": global.get(\"function.typeToRegisterLength\")(msg.dataPoint.protocol.type),\n        \"offset\": 0,\n        \"offsetbit\": msg.dataPoint.protocol.offsetbit,\n        \"scale\": msg.dataPoint.protocol.scale.toString(),\n        \"mask\": msg.dataPoint.protocol.mask\n    }\n];\n\nreturn msg;",
            "outputs": 1,
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 960,
            "y": 380,
            "wires": [
                [
                    "fbb73fe4327ec0b1"
                ]
            ]
        },
        {
            "id": "fb101ae30c163bce",
            "type": "function",
            "z": "d7e4f72770ddb9a3",
            "name": "send data based on config channel 2",
            "func": "msg.payload = \"\";\n\nmsg.sequences = flow.get(\"device.data\").filter(dataPoint => dataPoint.protocol.channel === 2).map(dataPoint => {\n    return { \n        dataPoint: dataPoint,\n        name: dataPoint.id, \n        fc: dataPoint.protocol.fc, \n        address: dataPoint.protocol.address, \n        unitid: flow.get(\"device.node.unitId\"), \n        quantity: global.get(\"function.typeToRegisterLength\")(dataPoint.protocol.type)\n    };\n});\n\nif (msg.sequences.length > 0){\n    node.send(msg);\n} else {\n    node.done();\n}\n\nnode.done();\n",
            "outputs": 1,
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 430,
            "y": 380,
            "wires": [
                [
                    "dbdbad4047265c0b"
                ]
            ]
        },
        {
            "id": "b8f2e6f3ffa0fc0c",
            "type": "function",
            "z": "d7e4f72770ddb9a3",
            "name": "Set parameters channel 2",
            "func": "const protocolParameter = flow.get(\"device.protocol\");\nconst channel = global.get(\"device.interface.serial.channels\").find(channel => channel.id === 2);\n\nif (channel) {\n    msg.payload = {\n        \"connectorType\": channel.connectorType,\n        \"serialPort\": channel.serialPort,\n        \"serialBaudrate\": protocolParameter.serialBaudrate ? protocolParameter.serialBaudrate : 19200,\n        \"serialDatabits\": protocolParameter.serialDatabits ? protocolParameter.serialDatabits : 8,\n        \"serialStopbits\": protocolParameter.serialStopbits ? protocolParameter.serialStopbits : 1,\n        \"serialParity\": protocolParameter.serialParity ? protocolParameter.serialParity : \"none\",\n        \"serialType\": protocolParameter.serialType ? protocolParameter.serialType : \"RTU-BUFFERD\",\n        \"serialConnectionDelay\": protocolParameter.serialConnectionDelay ? protocolParameter.serialConnectionDelay : 100,\n        \"unitId\": protocolParameter.unitId ? protocolParameter.unitId : 1,\n        \"commandDelay\": protocolParameter.commandDelay ? protocolParameter.commandDelay : 5,\n        \"clientTimeout\": protocolParameter.clientTimeout ? protocolParameter.clientTimeout : 1000,\n        \"reconnectTimeout\": protocolParameter.reconnectTimeout ? protocolParameter.reconnectTimeout : 2000\n    };\n\n    node.send(msg);\n} else {\n    node.done()\n}\n\nnode.done()\n",
            "outputs": 1,
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 810,
            "y": 120,
            "wires": [
                [
                    "ddb520538f245dab"
                ]
            ]
        }
    ],
    "configs": [
        {
            "id": "4cc9c8b77fd8acf3",
            "type": "modbus-client",
            "z": "d7e4f72770ddb9a3",
            "name": "Serial - Channel 1",
            "clienttype": "serial",
            "bufferCommands": true,
            "stateLogEnabled": false,
            "queueLogEnabled": false,
            "failureLogEnabled": true,
            "tcpHost": "127.0.0.1",
            "tcpPort": "502",
            "tcpType": "DEFAULT",
            "serialPort": "/dev/ttyAMA2",
            "serialType": "RTU-BUFFERD",
            "serialBaudrate": "19200",
            "serialDatabits": "8",
            "serialStopbits": "1",
            "serialParity": "none",
            "serialConnectionDelay": "100",
            "serialAsciiResponseStartDelimiter": "0x3A",
            "unit_id": 1,
            "commandDelay": 5,
            "clientTimeout": 1000,
            "reconnectOnTimeout": true,
            "reconnectTimeout": 2000,
            "parallelUnitIdsAllowed": false,
            "showWarnings": true,
            "showLogs": true
        },
        {
            "id": "416b4c046be3315e",
            "type": "modbus-client",
            "z": "d7e4f72770ddb9a3",
            "name": "Seriacl Channel 2",
            "clienttype": "serial",
            "bufferCommands": true,
            "stateLogEnabled": false,
            "queueLogEnabled": false,
            "failureLogEnabled": true,
            "tcpHost": "127.0.0.1",
            "tcpPort": "502",
            "tcpType": "DEFAULT",
            "serialPort": "/dev/ttyAMA1",
            "serialType": "RTU-BUFFERD",
            "serialBaudrate": "19200",
            "serialDatabits": "8",
            "serialStopbits": "1",
            "serialParity": "none",
            "serialConnectionDelay": "100",
            "serialAsciiResponseStartDelimiter": "0x3A",
            "unit_id": "1",
            "commandDelay": "5",
            "clientTimeout": "1000",
            "reconnectOnTimeout": true,
            "reconnectTimeout": "2000",
            "parallelUnitIdsAllowed": false,
            "showWarnings": true,
            "showLogs": true
        }
    ]
}