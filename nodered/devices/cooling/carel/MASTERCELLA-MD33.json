{
    "id": "d1d5af6082a30807",
    "label": "MASTERCELLA-MD33",
    "disabled": false,
    "info": "",
    "env": [],
    "nodes": [
        {
            "id": "1174bb48fc57de0a",
            "type": "inject",
            "z": "d1d5af6082a30807",
            "name": "",
            "props": [
                {
                    "p": "payload"
                }
            ],
            "repeat": "10",
            "crontab": "",
            "once": true,
            "onceDelay": "10",
            "topic": "",
            "payload": "",
            "payloadType": "date",
            "x": 170,
            "y": 240,
            "wires": [
                [
                    "3b588b3ae611146d"
                ]
            ]
        },
        {
            "id": "752971bc946ab700",
            "type": "function",
            "z": "d1d5af6082a30807",
            "name": "Read Analog Values",
            "func": "msg.type = \"ANALOG\";\n\nmsg.payload = { value: msg.payload, 'fc': 3, 'unitid': flow.get(\"device\").node.unitId, 'address': 0, 'quantity': 5 };\n\nreturn msg\n",
            "outputs": 1,
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 560,
            "y": 240,
            "wires": [
                [
                    "a3684be01e1e0397"
                ]
            ]
        },
        {
            "id": "a3684be01e1e0397",
            "type": "modbus-flex-getter",
            "z": "d1d5af6082a30807",
            "name": "",
            "showStatusActivities": true,
            "showErrors": true,
            "showWarnings": true,
            "logIOActivities": false,
            "server": "4cc9c8b77fd8acf3",
            "useIOFile": false,
            "ioFile": "",
            "useIOForPayload": false,
            "emptyMsgOnFail": false,
            "keepMsgProperties": true,
            "delayOnStart": false,
            "startDelayTime": "",
            "x": 810,
            "y": 260,
            "wires": [
                [
                    "f8e17cbd84548cac"
                ],
                []
            ]
        },
        {
            "id": "d0e563c1507de52a",
            "type": "function",
            "z": "d1d5af6082a30807",
            "name": "Read Boolean Values",
            "func": "msg.type = \"BOOLEAN\";\n\nmsg.payload = { value: msg.payload, 'fc': 1, 'unitid': flow.get(\"device\").node.unitId, 'address': 0, 'quantity': 24 }; \n\nreturn msg\n",
            "outputs": 1,
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 560,
            "y": 280,
            "wires": [
                [
                    "a3684be01e1e0397"
                ]
            ]
        },
        {
            "id": "77e1f6e6d97c1444",
            "type": "buffer-parser",
            "z": "d1d5af6082a30807",
            "name": "",
            "data": "payload",
            "dataType": "msg",
            "specification": "spec",
            "specificationType": "msg",
            "items": [
                {
                    "type": "int16be",
                    "name": "item1",
                    "offset": 0,
                    "length": 1,
                    "offsetbit": 0,
                    "scale": "0.1",
                    "mask": ""
                }
            ],
            "swap1": "",
            "swap2": "",
            "swap3": "",
            "swap1Type": "swap",
            "swap2Type": "swap",
            "swap3Type": "swap",
            "msgProperty": "payload",
            "msgPropertyType": "str",
            "resultType": "keyvalue",
            "resultTypeType": "return",
            "multipleResult": false,
            "fanOutMultipleResult": false,
            "setTopic": true,
            "outputs": 1,
            "x": 1290,
            "y": 240,
            "wires": [
                [
                    "14271f78d26e4ae1"
                ]
            ]
        },
        {
            "id": "f8e17cbd84548cac",
            "type": "switch",
            "z": "d1d5af6082a30807",
            "name": "",
            "property": "type",
            "propertyType": "msg",
            "rules": [
                {
                    "t": "eq",
                    "v": "ANALOG",
                    "vt": "str"
                },
                {
                    "t": "eq",
                    "v": "INTEGER",
                    "vt": "str"
                },
                {
                    "t": "eq",
                    "v": "BOOLEAN",
                    "vt": "str"
                }
            ],
            "checkall": "true",
            "repair": false,
            "outputs": 3,
            "x": 990,
            "y": 240,
            "wires": [
                [
                    "42cf579c7a92afe9"
                ],
                [
                    "b69e05d8144d7e73"
                ],
                [
                    "2cc7c58304b355f0"
                ]
            ]
        },
        {
            "id": "42cf579c7a92afe9",
            "type": "function",
            "z": "d1d5af6082a30807",
            "name": "function 4",
            "func": "msg.spec = {\n    \"options\":\n    {\n        \"byteSwap\": false,\n        \"resultType\": \"keyvalue\",\n        \"singleResult\": true,\n        \"setTopic\": true,\n        \"msgProperty\": \"payload\",\n    },\n    \"items\": []\n}\n\nvar adressIcrement = msg.modbusRequest.address;\nvar offset = 0;\nconst items = msg.payload.map(value => {\n    const item = {\n        \"name\": \"ANALOG-\" + adressIcrement.toString(),\n        \"type\": \"int16be\",\n        \"length \": 1,\n        \"offset\": offset,\n        \"offsetbit\": 0,\n        \"scale\": \"0.1\",\n        \"mask\": \"\"\n    };\n    adressIcrement++;\n    offset = offset + 2;\n\n    return item;\n});\n\nmsg.spec.items = items;\n\nreturn msg;",
            "outputs": 1,
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 1140,
            "y": 240,
            "wires": [
                [
                    "77e1f6e6d97c1444"
                ]
            ]
        },
        {
            "id": "b69e05d8144d7e73",
            "type": "function",
            "z": "d1d5af6082a30807",
            "name": "function 5",
            "func": "msg.spec = {\n    \"options\":\n    {\n        \"byteSwap\": false,\n        \"resultType\": \"keyvalue\",\n        \"singleResult\": true,\n        \"setTopic\": true,\n        \"msgProperty\": \"payload\",\n    },\n    \"items\": []\n}\n\nvar adressIcrement = msg.modbusRequest.address;\nvar offset = 0;\nconst items = msg.payload.map(value => {\n    const item = {\n        \"name\": \"INTEGER-\" + adressIcrement.toString(),\n        \"type\": \"int16be\",\n        \"length \": 1,\n        \"offset\": offset,\n        \"offsetbit\": 0,\n        \"scale\": \"1\",\n        \"mask\": \"\"\n    };\n    adressIcrement++;\n    offset = offset + 2;\n\n    return item;\n});\n\nmsg.spec.items = items;\n\nreturn msg;",
            "outputs": 1,
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 1140,
            "y": 280,
            "wires": [
                [
                    "c6527239fa787694"
                ]
            ]
        },
        {
            "id": "2cc7c58304b355f0",
            "type": "function",
            "z": "d1d5af6082a30807",
            "name": "function 6",
            "func": "var adressIcrement = msg.modbusRequest.address;\nconst booleanValues = msg.payload.reduce(function (obj, value) {\n    let prefix = adressIcrement > 14 && adressIcrement < 23 ? \"ALARM-\" : \"STATE-\";\n    let name = prefix + adressIcrement.toString();\n    obj[name] = value;\n    adressIcrement++;\n\n    return obj;\n}, {});\n\nmsg.payload = booleanValues;\n\nreturn msg;",
            "outputs": 1,
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 1140,
            "y": 320,
            "wires": [
                [
                    "2f30304b43101ff1"
                ]
            ]
        },
        {
            "id": "c6527239fa787694",
            "type": "buffer-parser",
            "z": "d1d5af6082a30807",
            "name": "",
            "data": "payload",
            "dataType": "msg",
            "specification": "spec",
            "specificationType": "msg",
            "items": [
                {
                    "type": "int16be",
                    "name": "item1",
                    "offset": 0,
                    "length": 1,
                    "offsetbit": 0,
                    "scale": "0.1",
                    "mask": ""
                }
            ],
            "swap1": "",
            "swap2": "",
            "swap3": "",
            "swap1Type": "swap",
            "swap2Type": "swap",
            "swap3Type": "swap",
            "msgProperty": "payload",
            "msgPropertyType": "str",
            "resultType": "keyvalue",
            "resultTypeType": "return",
            "multipleResult": false,
            "fanOutMultipleResult": false,
            "setTopic": true,
            "outputs": 1,
            "x": 1290,
            "y": 280,
            "wires": [
                [
                    "0fa66834a8775daa"
                ]
            ]
        },
        {
            "id": "9e8c8d916d3ab9b9",
            "type": "mqtt in",
            "z": "d1d5af6082a30807",
            "name": "Command",
            "topic": "",
            "qos": "2",
            "datatype": "auto-detect",
            "broker": "de96f526d294fb46",
            "nl": false,
            "rap": true,
            "rh": 0,
            "inputs": 1,
            "x": 120,
            "y": 600,
            "wires": [
                [
                    "39346a19aeb619c4"
                ]
            ]
        },
        {
            "id": "9ad76fd273b04c09",
            "type": "mqtt out",
            "z": "d1d5af6082a30807",
            "name": "",
            "topic": "cloud/upstream/data",
            "qos": "2",
            "retain": "true",
            "respTopic": "",
            "contentType": "",
            "userProps": "",
            "correl": "",
            "expiry": "",
            "broker": "de96f526d294fb46",
            "x": 1800,
            "y": 600,
            "wires": []
        },
        {
            "id": "fae4b550862c9c31",
            "type": "function",
            "z": "d1d5af6082a30807",
            "name": "Set device values",
            "func": "var devices = global.get(\"cloud.devices\").filter(device => {\n    return device.node.id === flow.get(\"device\").node.id\n})\n\nfor (var propertyName in msg.payload) {\n    if (typeof msg.payload[propertyName] === 'number') {\n        msg.payload[propertyName] = Math.round((msg.payload[propertyName] + Number.EPSILON) * 100) / 100\n    }\n}\n\ndevices.forEach(device => {\n    device.sensors = msg.payload;\n    flow.get(\"device\").sensors = msg.payload;\n});\n\nreturn msg;",
            "outputs": 1,
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 1770,
            "y": 260,
            "wires": [
                []
            ]
        },
        {
            "id": "14271f78d26e4ae1",
            "type": "change",
            "z": "d1d5af6082a30807",
            "name": "",
            "rules": [
                {
                    "t": "set",
                    "p": "topic",
                    "pt": "msg",
                    "to": "sensors",
                    "tot": "str"
                }
            ],
            "action": "",
            "property": "",
            "from": "",
            "to": "",
            "reg": false,
            "x": 1450,
            "y": 240,
            "wires": [
                [
                    "3e0889f189cbe0fc"
                ]
            ]
        },
        {
            "id": "0fa66834a8775daa",
            "type": "change",
            "z": "d1d5af6082a30807",
            "name": "",
            "rules": [
                {
                    "t": "set",
                    "p": "topic",
                    "pt": "msg",
                    "to": "sensors",
                    "tot": "str"
                }
            ],
            "action": "",
            "property": "",
            "from": "",
            "to": "",
            "reg": false,
            "x": 1450,
            "y": 280,
            "wires": [
                [
                    "3e0889f189cbe0fc"
                ]
            ]
        },
        {
            "id": "3e0889f189cbe0fc",
            "type": "join",
            "z": "d1d5af6082a30807",
            "name": "",
            "mode": "custom",
            "build": "merged",
            "property": "payload",
            "propertyType": "msg",
            "key": "topic",
            "joiner": "\\n",
            "joinerType": "str",
            "accumulate": false,
            "timeout": "3",
            "count": "",
            "reduceRight": false,
            "reduceExp": "",
            "reduceInit": "",
            "reduceInitType": "",
            "reduceFixup": "",
            "x": 1590,
            "y": 260,
            "wires": [
                [
                    "fae4b550862c9c31"
                ]
            ]
        },
        {
            "id": "339402d4aef28c5a",
            "type": "delay",
            "z": "d1d5af6082a30807",
            "name": "",
            "pauseType": "delay",
            "timeout": "1",
            "timeoutUnits": "seconds",
            "rate": "1",
            "nbRateUnits": "1",
            "rateUnits": "second",
            "randomFirst": "1",
            "randomLast": "5",
            "randomUnits": "seconds",
            "drop": false,
            "allowrate": false,
            "outputs": 1,
            "x": 360,
            "y": 280,
            "wires": [
                [
                    "d0e563c1507de52a"
                ]
            ]
        },
        {
            "id": "2f30304b43101ff1",
            "type": "function",
            "z": "d1d5af6082a30807",
            "name": "Set device values",
            "func": "var devices = global.get(\"cloud.devices\").filter(device => {\n    return device.node.id === flow.get(\"device\").node.id\n})\nfor (var propertyName in msg.payload) {\n    if (typeof msg.payload[propertyName] === 'number') {\n        msg.payload[propertyName] = Math.round((msg.payload[propertyName] + Number.EPSILON) * 100) / 100\n    }\n}\n\ndevices.forEach(device => {\n    const alarms = Object.keys(msg.payload)\n        .filter(key => key.includes(\"ALARM\"))\n        .reduce((obj, key) => {\n            obj[key] = msg.payload[key];\n            return obj;\n        }, {});\n    const states = Object.keys(msg.payload)\n        .filter(key => key.includes(\"STATE\"))\n        .reduce((obj, key) => {\n            obj[key] = msg.payload[key];\n            return obj;\n        }, {});\n    device.errors = alarms;\n    device.states = states;\n    flow.get(\"device\").errors = alarms;\n    flow.get(\"device\").states = states;\n});\n\nreturn msg;",
            "outputs": 1,
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 1770,
            "y": 320,
            "wires": [
                []
            ]
        },
        {
            "id": "0ddbae0a559603cf",
            "type": "inject",
            "z": "d1d5af6082a30807",
            "name": "",
            "props": [
                {
                    "p": "payload"
                }
            ],
            "repeat": "1800",
            "crontab": "",
            "once": true,
            "onceDelay": "10",
            "topic": "",
            "payload": "{}",
            "payloadType": "json",
            "x": 130,
            "y": 480,
            "wires": [
                [
                    "5538fc8d557eb90b"
                ]
            ]
        },
        {
            "id": "d467de8c0ca340bc",
            "type": "function",
            "z": "d1d5af6082a30807",
            "name": "Set Command for this device",
            "func": "msg.action = \"subscribe\";\nmsg.topic = {\n    \"qos\": 2,\n    \"topic\": \"device/command/\" + flow.get(\"device\").node.id\n}\n\nreturn msg;",
            "outputs": 1,
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 180,
            "y": 560,
            "wires": [
                [
                    "9e8c8d916d3ab9b9"
                ]
            ]
        },
        {
            "id": "39346a19aeb619c4",
            "type": "debug",
            "z": "d1d5af6082a30807",
            "name": "debug 2",
            "active": true,
            "tosidebar": true,
            "console": false,
            "tostatus": false,
            "complete": "false",
            "statusVal": "",
            "statusType": "auto",
            "x": 320,
            "y": 600,
            "wires": []
        },
        {
            "id": "c411d99f85db7f6b",
            "type": "inject",
            "z": "d1d5af6082a30807",
            "name": "",
            "props": [
                {
                    "p": "payload"
                }
            ],
            "repeat": "",
            "crontab": "",
            "once": true,
            "onceDelay": 0.1,
            "topic": "",
            "payload": "",
            "payloadType": "date",
            "x": 170,
            "y": 120,
            "wires": [
                [
                    "7647930fe7612eae"
                ]
            ]
        },
        {
            "id": "7647930fe7612eae",
            "type": "getflows",
            "z": "d1d5af6082a30807",
            "name": "",
            "x": 320,
            "y": 120,
            "wires": [
                [
                    "1cde108c090826be"
                ]
            ]
        },
        {
            "id": "1cde108c090826be",
            "type": "function",
            "z": "d1d5af6082a30807",
            "name": "Init",
            "func": "var devices = global.get(\"cloud.devices\").filter(device => {\n    return device.node.id === msg.thisflow;\n})\n\ndevices.forEach(device => {\n    flow.set(\"device\", {\n        \"node\": device.node,\n        \"uplink\": device.uplink,\n        \"downlink\": device.downlink,\n        \"sensors\": {},\n        \"errors\": {},\n        \"states\": {}\n    });\n});\n\nreturn msg;",
            "outputs": 1,
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 450,
            "y": 120,
            "wires": [
                []
            ]
        },
        {
            "id": "5538fc8d557eb90b",
            "type": "switch",
            "z": "d1d5af6082a30807",
            "name": "Config correct",
            "property": "node",
            "propertyType": "flow",
            "rules": [
                {
                    "t": "null"
                },
                {
                    "t": "istype",
                    "v": "object",
                    "vt": "object"
                }
            ],
            "checkall": "true",
            "repair": false,
            "outputs": 2,
            "x": 140,
            "y": 520,
            "wires": [
                [
                    "360d823cad2ddea5"
                ],
                [
                    "d467de8c0ca340bc"
                ]
            ]
        },
        {
            "id": "3b588b3ae611146d",
            "type": "switch",
            "z": "d1d5af6082a30807",
            "name": "Config correct",
            "property": "node",
            "propertyType": "flow",
            "rules": [
                {
                    "t": "istype",
                    "v": "object",
                    "vt": "object"
                }
            ],
            "checkall": "true",
            "repair": false,
            "outputs": 1,
            "x": 340,
            "y": 240,
            "wires": [
                [
                    "752971bc946ab700",
                    "339402d4aef28c5a"
                ]
            ]
        },
        {
            "id": "360d823cad2ddea5",
            "type": "function",
            "z": "d1d5af6082a30807",
            "name": "Error",
            "func": "node.warn(\"The device configuration is wrong!\")\nnode.done()",
            "outputs": 0,
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 330,
            "y": 520,
            "wires": []
        },
        {
            "id": "e804810159b83938",
            "type": "mqtt out",
            "z": "d1d5af6082a30807",
            "name": "",
            "topic": "cloud/upstream/error",
            "qos": "2",
            "retain": "true",
            "respTopic": "",
            "contentType": "",
            "userProps": "",
            "correl": "",
            "expiry": "",
            "broker": "de96f526d294fb46",
            "x": 1800,
            "y": 660,
            "wires": []
        }
    ],
    "configs": [
        {
            "id": "4cc9c8b77fd8acf3",
            "type": "modbus-client",
            "z": "d1d5af6082a30807",
            "name": "Aermec Serial",
            "clienttype": "serial",
            "bufferCommands": true,
            "stateLogEnabled": false,
            "queueLogEnabled": false,
            "failureLogEnabled": true,
            "tcpHost": "127.0.0.1",
            "tcpPort": "502",
            "tcpType": "DEFAULT",
            "serialPort": "/dev/ttyAMA2",
            "serialType": "RTU-BUFFERD",
            "serialBaudrate": "19200",
            "serialDatabits": "8",
            "serialStopbits": "1",
            "serialParity": "none",
            "serialConnectionDelay": "100",
            "serialAsciiResponseStartDelimiter": "0x3A",
            "unit_id": 1,
            "commandDelay": 1,
            "clientTimeout": 1000,
            "reconnectOnTimeout": true,
            "reconnectTimeout": 2000,
            "parallelUnitIdsAllowed": true,
            "showWarnings": true,
            "showLogs": true
        }
    ]
}