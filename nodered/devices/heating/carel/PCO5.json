{
    "id": "f8f5680259c9e32f",
    "label": "jPM8akNSHQ29kLi7J6WUTx",
    "disabled": false,
    "info": "",
    "env": [],
    "nodes": [
        {
            "id": "7g3lj1y0rrcxfb1f",
            "type": "mqtt in",
            "z": "f8f5680259c9e32f",
            "name": "Command",
            "topic": "",
            "qos": "2",
            "datatype": "auto-detect",
            "broker": "de96f526d294fb46",
            "nl": false,
            "rap": true,
            "rh": 0,
            "inputs": 1,
            "x": 120,
            "y": 680,
            "wires": [
                [
                    "pe0ed5k04jcmog45"
                ]
            ]
        },
        {
            "id": "jpakon98prdl8bw1",
            "type": "mqtt out",
            "z": "f8f5680259c9e32f",
            "name": "",
            "topic": "cloud/upstream/data",
            "qos": "2",
            "retain": "true",
            "respTopic": "",
            "contentType": "",
            "userProps": "",
            "correl": "",
            "expiry": "",
            "broker": "de96f526d294fb46",
            "x": 1140,
            "y": 680,
            "wires": []
        },
        {
            "id": "83kn1oqqy8d1lydf",
            "type": "inject",
            "z": "f8f5680259c9e32f",
            "name": "",
            "props": [
                {
                    "p": "payload"
                }
            ],
            "repeat": "1800",
            "crontab": "",
            "once": true,
            "onceDelay": "10",
            "topic": "",
            "payload": "{}",
            "payloadType": "json",
            "x": 130,
            "y": 560,
            "wires": [
                [
                    "oxuzcutpmtenhyhv"
                ]
            ]
        },
        {
            "id": "5hvv5e1apojzzi11",
            "type": "function",
            "z": "f8f5680259c9e32f",
            "name": "Set Command for this device",
            "func": "msg.action = \"subscribe\";\nmsg.topic = {\n    \"qos\": 2,\n    \"topic\": \"device/command/\" + flow.get(\"device\").node.id\n}\n\nreturn msg;",
            "outputs": 1,
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 180,
            "y": 640,
            "wires": [
                [
                    "7g3lj1y0rrcxfb1f"
                ]
            ]
        },
        {
            "id": "izkk4q5vtm5blbi6",
            "type": "inject",
            "z": "f8f5680259c9e32f",
            "name": "Startup",
            "props": [
                {
                    "p": "payload"
                }
            ],
            "repeat": "",
            "crontab": "",
            "once": true,
            "onceDelay": "3",
            "topic": "",
            "payload": "",
            "payloadType": "date",
            "x": 160,
            "y": 80,
            "wires": [
                [
                    "gwjk0cofhg81lmtm"
                ]
            ]
        },
        {
            "id": "gwjk0cofhg81lmtm",
            "type": "getflows",
            "z": "f8f5680259c9e32f",
            "name": "",
            "x": 320,
            "y": 80,
            "wires": [
                [
                    "lezqyvrbzrv08dbe"
                ]
            ]
        },
        {
            "id": "lezqyvrbzrv08dbe",
            "type": "function",
            "z": "f8f5680259c9e32f",
            "name": "Init",
            "func": "var device = global.get(\"cloud.devices\").find(device => {\n    return device.node.id === msg.payload.find(flow => flow.id === msg.thisflow).label;\n})\n\nflow.set(\"device\", {\n    \"node\": device.node,\n    \"data\": device.data,\n    \"protocol\": device.protocol,\n    \"uplink\": device.uplink,\n    \"downlink\": device.downlink,\n    \"sensors\": {},\n    \"errors\": {},\n    \"states\": {}\n});\n\nreturn msg;",
            "outputs": 1,
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 450,
            "y": 80,
            "wires": [
                [
                    "zx90y1987a81xx5p"
                ]
            ]
        },
        {
            "id": "oxuzcutpmtenhyhv",
            "type": "switch",
            "z": "f8f5680259c9e32f",
            "name": "Config correct",
            "property": "device.node",
            "propertyType": "flow",
            "rules": [
                {
                    "t": "null"
                },
                {
                    "t": "istype",
                    "v": "object",
                    "vt": "object"
                }
            ],
            "checkall": "true",
            "repair": false,
            "outputs": 2,
            "x": 140,
            "y": 600,
            "wires": [
                [
                    "la8pilirlzdjmxcu"
                ],
                [
                    "5hvv5e1apojzzi11"
                ]
            ]
        },
        {
            "id": "la8pilirlzdjmxcu",
            "type": "function",
            "z": "f8f5680259c9e32f",
            "name": "Error",
            "func": "node.warn(\"The device configuration is wrong!\")\nnode.done()",
            "outputs": 0,
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 330,
            "y": 600,
            "wires": []
        },
        {
            "id": "a8xmcs5pqnk6rcgv",
            "type": "mqtt out",
            "z": "f8f5680259c9e32f",
            "name": "",
            "topic": "cloud/upstream/error",
            "qos": "2",
            "retain": "true",
            "respTopic": "",
            "contentType": "",
            "userProps": "",
            "correl": "",
            "expiry": "",
            "broker": "de96f526d294fb46",
            "x": 1820,
            "y": 500,
            "wires": []
        },
        {
            "id": "hfxihqs1yfebftz3",
            "type": "modbus-flex-connector",
            "z": "f8f5680259c9e32f",
            "name": "Channel 1 Connector",
            "maxReconnectsPerMinute": 4,
            "emptyQueue": false,
            "showStatusActivities": true,
            "showErrors": true,
            "server": "fbvjk0r298auh66k",
            "x": 1080,
            "y": 80,
            "wires": [
                []
            ]
        },
        {
            "id": "x3ibdzq1654r6uqv",
            "type": "modbus-flex-sequencer",
            "z": "f8f5680259c9e32f",
            "name": "Channel 1 Read",
            "sequences": [
                {
                    "name": "Test",
                    "unitid": "1",
                    "fc": "FC3",
                    "address": "1",
                    "quantity": "1"
                }
            ],
            "server": "fbvjk0r298auh66k",
            "showStatusActivities": true,
            "showErrors": true,
            "showWarnings": true,
            "logIOActivities": false,
            "useIOFile": false,
            "ioFile": "",
            "useIOForPayload": false,
            "emptyMsgOnFail": false,
            "keepMsgProperties": true,
            "delayOnStart": false,
            "startDelayTime": "",
            "x": 740,
            "y": 320,
            "wires": [
                [
                    "f6pt1bdd3ux8u7qy",
                    "1wq302noqkxff9qk"
                ],
                []
            ]
        },
        {
            "id": "3upuww8ogo4oa174",
            "type": "function",
            "z": "f8f5680259c9e32f",
            "name": "send data based on config channel 1",
            "func": "msg.payload = \"\";\n\nmsg.sequences = flow.get(\"device.data\").filter(dataPoint => dataPoint.protocol.channel === 1).map(dataPoint => {\n    return { \n        dataPoint: dataPoint,\n        name: dataPoint.id, \n        fc: dataPoint.protocol.fc, \n        address: dataPoint.protocol.address, \n        unitid: flow.get(\"device.node.unitId\"), \n        quantity: global.get(\"function.typeToRegisterLength\")(dataPoint.protocol.type)\n    };\n});\n\nif (msg.sequences.length > 0){\n    node.send(msg);\n} else {\n    node.done();\n}\n\nnode.done();\n",
            "outputs": 1,
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 430,
            "y": 320,
            "wires": [
                [
                    "x3ibdzq1654r6uqv"
                ]
            ]
        },
        {
            "id": "ei6s91ex5c6jhmzv",
            "type": "comment",
            "z": "f8f5680259c9e32f",
            "name": "----- Register for commands from cloud",
            "info": "",
            "x": 150,
            "y": 500,
            "wires": []
        },
        {
            "id": "1lfriuiuw5fp6q5p",
            "type": "comment",
            "z": "f8f5680259c9e32f",
            "name": "---- Connections initialization",
            "info": "",
            "x": 120,
            "y": 20,
            "wires": []
        },
        {
            "id": "ff8j8siirmpav0ht",
            "type": "function",
            "z": "f8f5680259c9e32f",
            "name": "Set parameters channel 1",
            "func": "const protocolParameter = flow.get(\"device.protocol\");\nconst channel = global.get(\"device.interface.serial.channels\").find(channel => channel.id === 1);\n\nif (channel) {\n    msg.payload = {\n        \"connectorType\": channel.connectorType,\n        \"serialPort\": channel.serialPort,\n        \"serialBaudrate\": protocolParameter.serialBaudrate ? protocolParameter.serialBaudrate : 19200,\n        \"serialDatabits\": protocolParameter.serialDatabits ? protocolParameter.serialDatabits : 8,\n        \"serialStopbits\": protocolParameter.serialStopbits ? protocolParameter.serialStopbits : 1,\n        \"serialParity\": protocolParameter.serialParity ? protocolParameter.serialParity : \"none\",\n        \"serialType\": protocolParameter.serialType ? protocolParameter.serialType : \"RTU-BUFFERD\",\n        \"serialConnectionDelay\": protocolParameter.serialConnectionDelay ? protocolParameter.serialConnectionDelay : 100,\n        \"unitId\": protocolParameter.unitId ? protocolParameter.unitId : 1,\n        \"commandDelay\": protocolParameter.commandDelay ? protocolParameter.commandDelay : 5,\n        \"clientTimeout\": protocolParameter.clientTimeout ? protocolParameter.clientTimeout : 1000,\n        \"reconnectTimeout\": protocolParameter.reconnectTimeout ? protocolParameter.reconnectTimeout : 2000\n    };\n\n    node.send(msg);\n} else {\n    node.done()\n}\n\nnode.done()\n",
            "outputs": 1,
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 810,
            "y": 80,
            "wires": [
                [
                    "hfxihqs1yfebftz3"
                ]
            ]
        },
        {
            "id": "zx90y1987a81xx5p",
            "type": "switch",
            "z": "f8f5680259c9e32f",
            "name": "Config correct",
            "property": "device.node",
            "propertyType": "flow",
            "rules": [
                {
                    "t": "istype",
                    "v": "object",
                    "vt": "object"
                }
            ],
            "checkall": "true",
            "repair": false,
            "outputs": 1,
            "x": 600,
            "y": 80,
            "wires": [
                [
                    "ff8j8siirmpav0ht"
                ]
            ]
        },
        {
            "id": "45oz7ctjavkm2zbe",
            "type": "comment",
            "z": "f8f5680259c9e32f",
            "name": "---- Data",
            "info": "",
            "x": 60,
            "y": 200,
            "wires": []
        },
        {
            "id": "f6pt1bdd3ux8u7qy",
            "type": "function",
            "z": "f8f5680259c9e32f",
            "name": "Set telemetry data point values",
            "func": "if (msg.dataPoint.protocol.type !== \"bool\") {\n    msg.spec = {\n        \"options\":\n        {\n            \"byteSwap\": false,\n            \"resultType\": \"keyvalue\",\n            \"singleResult\": true,\n            \"setTopic\": true,\n            \"msgProperty\": \"payload\",\n        },\n        \"items\": []\n    }\n\n    msg.spec.items = [\n        {\n            \"name\": msg.name,\n            \"type\": msg.dataPoint.protocol.type,\n            \"length \": global.get(\"function.typeToRegisterLength\")(msg.dataPoint.protocol.type),\n            \"offset\": 0,\n            \"offsetbit\": msg.dataPoint.protocol.offsetbit,\n            \"scale\": msg.dataPoint.protocol.scale.toString(),\n            \"mask\": msg.dataPoint.protocol.mask\n        }\n    ];\n\n    node.send(msg);\n}\n\nnode.done();\n",
            "outputs": 1,
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 1050,
            "y": 340,
            "wires": [
                [
                    "8e1150jj2s5mk1ox"
                ]
            ]
        },
        {
            "id": "8e1150jj2s5mk1ox",
            "type": "buffer-parser",
            "z": "f8f5680259c9e32f",
            "name": "",
            "data": "payload",
            "dataType": "msg",
            "specification": "spec",
            "specificationType": "msg",
            "items": [
                {
                    "type": "int16be",
                    "name": "item1",
                    "offset": 0,
                    "length": 1,
                    "offsetbit": 0,
                    "scale": "0.1",
                    "mask": ""
                }
            ],
            "swap1": "",
            "swap2": "",
            "swap3": "",
            "swap1Type": "swap",
            "swap2Type": "swap",
            "swap3Type": "swap",
            "msgProperty": "payload",
            "msgPropertyType": "str",
            "resultType": "keyvalue",
            "resultTypeType": "return",
            "multipleResult": false,
            "fanOutMultipleResult": false,
            "setTopic": true,
            "outputs": 1,
            "x": 1370,
            "y": 340,
            "wires": [
                [
                    "izf2fgli07iteok5"
                ]
            ]
        },
        {
            "id": "4leqh48mswsh01z3",
            "type": "switch",
            "z": "f8f5680259c9e32f",
            "name": "Config correct",
            "property": "device.node",
            "propertyType": "flow",
            "rules": [
                {
                    "t": "istype",
                    "v": "object",
                    "vt": "object"
                }
            ],
            "checkall": "true",
            "repair": false,
            "outputs": 1,
            "x": 160,
            "y": 320,
            "wires": [
                [
                    "3upuww8ogo4oa174"
                ]
            ]
        },
        {
            "id": "izf2fgli07iteok5",
            "type": "function",
            "z": "f8f5680259c9e32f",
            "name": "Set sensor value on device",
            "func": "var device = global.get(\"cloud.devices\").find(device => {\n    return device.node.id === flow.get(\"device\").node.id\n})\n\nfor (var propertyName in msg.payload) {\n    if (typeof msg.payload[propertyName] === 'number') {\n        // Round to 2 decimal\n        msg.payload[propertyName] = Math.round((msg.payload[propertyName] + Number.EPSILON) * 100) / 100\n    }\n    if (msg.dataPoint.protocol.type === \"bool\" && msg.dataPoint.protocol.isError) {\n        if (msg.payload[propertyName]) {\n            device.errors[propertyName] = msg.payload[propertyName];\n            flow.get(\"device\").errors[propertyName] = msg.payload[propertyName];\n        } else {\n            delete device.errors[propertyName];\n            delete flow.get(\"device\").errors[propertyName];\n        }\n    } else if (msg.dataPoint.protocol.type === \"bool\") {\n        device.states[propertyName] = msg.payload[propertyName];\n        flow.get(\"device\").states[propertyName] = msg.payload[propertyName];\n    } else {\n        device.sensors[propertyName] = msg.payload[propertyName];\n        flow.get(\"device\").sensors[propertyName] = msg.payload[propertyName];\n    }\n}\n\nreturn msg;",
            "outputs": 1,
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 1600,
            "y": 380,
            "wires": [
                [
                    "v54c30tj9rk7rpj2"
                ]
            ]
        },
        {
            "id": "ruuz5rdqd97f4ffz",
            "type": "inject",
            "z": "f8f5680259c9e32f",
            "name": "Read intervall",
            "props": [
                {
                    "p": "payload"
                },
                {
                    "p": "topic",
                    "vt": "str"
                }
            ],
            "repeat": "20",
            "crontab": "",
            "once": true,
            "onceDelay": "10",
            "topic": "",
            "payload": "",
            "payloadType": "date",
            "x": 160,
            "y": 260,
            "wires": [
                [
                    "4leqh48mswsh01z3"
                ]
            ]
        },
        {
            "id": "0mn3r5tujs7872vp",
            "type": "switch",
            "z": "f8f5680259c9e32f",
            "name": "",
            "property": "device.errors",
            "propertyType": "flow",
            "rules": [
                {
                    "t": "nempty"
                }
            ],
            "checkall": "true",
            "repair": false,
            "outputs": 1,
            "x": 1650,
            "y": 500,
            "wires": [
                [
                    "a8xmcs5pqnk6rcgv"
                ]
            ]
        },
        {
            "id": "v54c30tj9rk7rpj2",
            "type": "switch",
            "z": "f8f5680259c9e32f",
            "name": "",
            "property": "device.errors",
            "propertyType": "flow",
            "rules": [
                {
                    "t": "istype",
                    "v": "object",
                    "vt": "object"
                }
            ],
            "checkall": "true",
            "repair": false,
            "outputs": 1,
            "x": 1530,
            "y": 500,
            "wires": [
                [
                    "0mn3r5tujs7872vp"
                ]
            ]
        },
        {
            "id": "pe0ed5k04jcmog45",
            "type": "function",
            "z": "f8f5680259c9e32f",
            "name": "send write data channel 1",
            "func": "if (msg.payload.dataPoint.protocol.channel === 1){\n    if (msg.payload.dataPoint.protocol.type === \"bool\"){\n        if (msg.payload.dataPoint.protocol.invert){\n            msg.payload.value = !msg.payload.value;\n        }\n        msg.payload = {\n            \"value\": msg.payload.value,\n            \"fc\": 5,\n            \"unitid\": flow.get(\"device.node.unitId\"),\n            \"address\": msg.payload.dataPoint.protocol.address,\n            \"quantity\": 1\n        } \n    } else {\n        msg.payload = {\n            \"value\": parseInt(msg.payload.value) * (1 / msg.payload.dataPoint.protocol.scale),\n            \"fc\": 16,\n            \"unitid\": flow.get(\"device.node.unitId\"),\n            \"address\": msg.payload.dataPoint.protocol.address,\n            \"quantity\": global.get(\"function.typeToRegisterLength\")(msg.payload.dataPoint.protocol.type)\n        } \n    }\n\n    node.send (msg);\n}\n\nnode.done();\n\n",
            "outputs": 1,
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 390,
            "y": 680,
            "wires": [
                [
                    "m2w0k5yhs9v6vnpj"
                ]
            ]
        },
        {
            "id": "m2w0k5yhs9v6vnpj",
            "type": "modbus-flex-write",
            "z": "f8f5680259c9e32f",
            "name": "Channel 1",
            "showStatusActivities": true,
            "showErrors": true,
            "showWarnings": true,
            "server": "fbvjk0r298auh66k",
            "emptyMsgOnFail": false,
            "keepMsgProperties": true,
            "delayOnStart": false,
            "startDelayTime": "",
            "x": 750,
            "y": 680,
            "wires": [
                [
                    "4leqh48mswsh01z3",
                    "kur8bcap9gts92gu"
                ],
                []
            ]
        },
        {
            "id": "1wq302noqkxff9qk",
            "type": "function",
            "z": "f8f5680259c9e32f",
            "name": "Set state data point values",
            "func": "if (msg.dataPoint.protocol.type === \"bool\") {\n    var payload = {};\n    payload[msg.name] = msg.payload[msg.dataPoint.protocol.offsetbit];\n\n    if (msg.dataPoint.protocol.invert) {\n        payload[msg.name] = !payload[msg.name];\n    }\n\n    msg.payload = payload;\n\n    node.send(msg);\n}\n\nnode.done();\n",
            "outputs": 1,
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 1040,
            "y": 380,
            "wires": [
                [
                    "izf2fgli07iteok5"
                ]
            ]
        },
        {
            "id": "kur8bcap9gts92gu",
            "type": "delay",
            "z": "f8f5680259c9e32f",
            "name": "",
            "pauseType": "delay",
            "timeout": "10",
            "timeoutUnits": "seconds",
            "rate": "1",
            "nbRateUnits": "1",
            "rateUnits": "second",
            "randomFirst": "1",
            "randomLast": "5",
            "randomUnits": "seconds",
            "drop": false,
            "allowrate": false,
            "outputs": 1,
            "x": 960,
            "y": 680,
            "wires": [
                [
                    "jpakon98prdl8bw1"
                ]
            ]
        }
    ]
}